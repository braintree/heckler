#!/bin/bash
HELP=$(
	cat <<-EOF
		This program produces a sample puppet repo used for testing
	EOF
)

set -o errexit
set -o pipefail
set -o nounset

shopt -s lastpipe

usage() {
	cat <<-EOF
		${HELP}
		
		usage: ${0}
		  -h this message
		  -u sample repo url
	EOF
}

function main() {
	NODES=(
		fozzie
		statler
		waldorf
	)

	MODULES=(
		fozzie
		statler
		waldorf
		muppetshow
	)

	AUTHORS=(
		[1]='misspiggy <heckler+misspiggy@getbraintree.com>'
		[2]='kermit <heckler+kermit@getbraintree.com>'
		[3]='misspiggy <heckler+misspiggy@getbraintree.com>'
		[4]='misspiggy <heckler+misspiggy@getbraintree.com>'
		[5]='misspiggy <heckler+misspiggy@getbraintree.com>'
		[6]='kermit <heckler+kermit@getbraintree.com>'
		[7]='kermit <heckler+kermit@getbraintree.com>'
		[8]='kermit <heckler+kermit@getbraintree.com>'
		[9]='misspiggy <heckler+misspiggy@getbraintree.com>'
		[10]='kermit <heckler+kermit@getbraintree.com>'
	)

	CO_AUTHORS=(
		[3]='kermit <heckler+kermit@getbraintree.com>'
		[5]='kermit <heckler+kermit@getbraintree.com>'
		[8]='misspiggy <heckler+misspiggy@getbraintree.com>'
	)

	MSGS=(
		[1]='commit1'
		[2]='stop nginx on fozzie & add episode one

stop nginx on fozzie
add episode one
modify wit on statler
modify poignant on waldor
modify slapstick on fozzie'
		[3]='finish the muppet show lyrics

finish composing the muppet show lyrics
move index out of muppetshow class into node
class'
		[4]='New Movie'
		[5]='Gonzo'
		[6]='add some fun diversions

add bsdgames on fozzie
add sl to statler & waldorf
'
		[7]='add kermit user, modify sail input

add kermit user and muppetshow group
modify the input to the sail game
'
		[8]='More Statler'
		[9]='Even more Statler'
		[10]='add gonzo user'
	)

	while getopts ":hu:" opt; do
		case "${opt}" in
		h)
			usage
			return
			;;
		u)
			REPO_URL=$OPTARG
			;;
		\?)
			usage 1>&2
			return 1
			;;
		:)
			printf "ERROR: Option -%s requires an argument\n" "${OPTARG}" >&2
			usage 1>&2
			return 1
			;;
		esac
	done
	shift $((OPTIND - 1))

	if ! [[ -v REPO_URL ]]; then
		printf 'ERROR: You must specify a repo url\n' >&2
		usage >&2
		return 1
	fi

	REPO='muppetshow'

	echo sudo rm -fr "${REPO}"
	sudo rm -fr "${REPO}"
	mkdir "${REPO}"
	pushd "${REPO}"

	git init -b main
	git config advice.detachedHead false

	mkdir -p nodes
	mkdir -p modules
	cp -r ../manifests/vendor/* modules/
	git add modules

	for module in "${MODULES[@]}"; do
		mkdir -p 'modules/'"${module}"'/manifests'
	done

	for ((commit = 1; commit <= "${#AUTHORS[@]}"; commit++)); do
		if ((commit == 1)); then
			for f in site.pp CODEOWNERS; do
				cp ../manifests/"${f}" ./
				git add "${f}"
			done
			cp ../puppet.conf ./
			git add puppet.conf
		fi
		if ((commit == 4)); then
			git checkout -b manhattan
		fi
		if ((commit == 6)); then
			git checkout main
		fi
		for module in "${MODULES[@]}"; do
			printf -v src '../manifests/modules/%s/manifests' "${module}"
			printf -v dst 'modules/%s/manifests' "${module}"
			pushd "${src}"
			pps=(*"${commit}".pp)
			popd
			for pp in "${pps[@]}"; do
				base_file=${pp%%"${commit}"'.pp'}
				cp "${src}"/"${pp}" "${dst}"/"${base_file}".pp
				git add "${dst}"/"${base_file}".pp
			done
		done
		for node in "${NODES[@]}"; do
			printf -v src '../manifests/nodes/%s%d.pp' "${node}" "${commit}"
			printf -v dst 'nodes/%s.pp' "${node}"
			cp "${src}" "${dst}"
			git add "${dst}"
		done
		msg="${MSGS[commit]}"
		if [[ -v "CO_AUTHORS[${commit}]" ]]; then
			printf -v co_author '\n\nCo-authored-by: %s' "${CO_AUTHORS[${commit}]}"
			msg+="${co_author}"
		fi
		git commit --author "${AUTHORS[$commit]}" -F - <<<"${msg}"
		if ((commit == 1)); then
			git tag v1 -m 'Release v1'
		fi
		if ((commit == 7)); then
			git merge -m 'Take Manhattan' manhattan
			git tag v2 -m 'Release v2'
		fi
		if ((commit == 9)); then
			git tag v3 -m 'Release v3'
		fi
		if ((commit == 10)); then
			git tag v4 -m 'Release v4'
		fi
	done

	## Delete remote tags
	tmp_repo=$(mktemp -d)
	git clone "${REPO_URL}" "${tmp_repo}"
	pushd "${tmp_repo}"
	# # Delete all local tags and get the list of remote tags:
	# git tag -l | xargs git tag -d
	# git fetch
	# Remove all remote tags
	git tag -l | mapfile -t remote_tags
	for tag in "${remote_tags[@]}"; do
		git push --delete origin "${tag}"
	done
	popd

	git remote add origin "${REPO_URL}"
	git push -fu origin main
	git push -f --tags

	popd
}

main "${@}"
