// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.15.8
// source: rizzopb.proto

package rizzopb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LockStatus int32

const (
	LockStatus_lock_unknown      LockStatus = 0
	LockStatus_locked_by_user    LockStatus = 1
	LockStatus_locked_by_another LockStatus = 2
	LockStatus_unlocked          LockStatus = 3
)

// Enum value maps for LockStatus.
var (
	LockStatus_name = map[int32]string{
		0: "lock_unknown",
		1: "locked_by_user",
		2: "locked_by_another",
		3: "unlocked",
	}
	LockStatus_value = map[string]int32{
		"lock_unknown":      0,
		"locked_by_user":    1,
		"locked_by_another": 2,
		"unlocked":          3,
	}
)

func (x LockStatus) Enum() *LockStatus {
	p := new(LockStatus)
	*p = x
	return p
}

func (x LockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rizzopb_proto_enumTypes[0].Descriptor()
}

func (LockStatus) Type() protoreflect.EnumType {
	return &file_rizzopb_proto_enumTypes[0]
}

func (x LockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockStatus.Descriptor instead.
func (LockStatus) EnumDescriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{0}
}

type LockReqType int32

const (
	LockReqType_lock   LockReqType = 0
	LockReqType_unlock LockReqType = 1
	LockReqType_state  LockReqType = 2
)

// Enum value maps for LockReqType.
var (
	LockReqType_name = map[int32]string{
		0: "lock",
		1: "unlock",
		2: "state",
	}
	LockReqType_value = map[string]int32{
		"lock":   0,
		"unlock": 1,
		"state":  2,
	}
)

func (x LockReqType) Enum() *LockReqType {
	p := new(LockReqType)
	*p = x
	return p
}

func (x LockReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_rizzopb_proto_enumTypes[1].Descriptor()
}

func (LockReqType) Type() protoreflect.EnumType {
	return &file_rizzopb_proto_enumTypes[1]
}

func (x LockReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockReqType.Descriptor instead.
func (LockReqType) EnumDescriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{1}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property         string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	PreviousValue    string `protobuf:"bytes,2,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	DesiredValue     string `protobuf:"bytes,3,opt,name=desired_value,json=desiredValue,proto3" json:"desired_value,omitempty"`
	Message          string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Name             string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CorrectiveChange bool   `protobuf:"varint,7,opt,name=corrective_change,json=correctiveChange,proto3" json:"corrective_change,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *Event) GetPreviousValue() string {
	if x != nil {
		return x.PreviousValue
	}
	return ""
}

func (x *Event) GetDesiredValue() string {
	if x != nil {
		return x.DesiredValue
	}
	return ""
}

func (x *Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Event) GetCorrectiveChange() bool {
	if x != nil {
		return x.CorrectiveChange
	}
	return false
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Source  string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	File    string `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Line    int64  `protobuf:"varint,5,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{1}
}

func (x *Log) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Log) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Log) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Log) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

type PuppetReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host                 string                     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	ConfigurationVersion string                     `protobuf:"bytes,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty"`
	ReportFormat         int64                      `protobuf:"varint,3,opt,name=report_format,json=reportFormat,proto3" json:"report_format,omitempty"`
	PuppetVersion        string                     `protobuf:"bytes,4,opt,name=puppet_version,json=puppetVersion,proto3" json:"puppet_version,omitempty"`
	Status               string                     `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	TransactionCompleted bool                       `protobuf:"varint,6,opt,name=transaction_completed,json=transactionCompleted,proto3" json:"transaction_completed,omitempty"`
	Noop                 bool                       `protobuf:"varint,7,opt,name=noop,proto3" json:"noop,omitempty"`
	NoopPending          bool                       `protobuf:"varint,8,opt,name=noop_pending,json=noopPending,proto3" json:"noop_pending,omitempty"`
	Environment          string                     `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	Logs                 []*Log                     `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
	ResourceStatuses     map[string]*ResourceStatus `protobuf:"bytes,11,rep,name=resource_statuses,json=resourceStatuses,proto3" json:"resource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CorrectiveChange     bool                       `protobuf:"varint,12,opt,name=corrective_change,json=correctiveChange,proto3" json:"corrective_change,omitempty"`
	CachedCatalogStatus  string                     `protobuf:"bytes,13,opt,name=cached_catalog_status,json=cachedCatalogStatus,proto3" json:"cached_catalog_status,omitempty"`
	Confdir              string                     `protobuf:"bytes,14,opt,name=confdir,proto3" json:"confdir,omitempty"`
	LastApplyVersion     string                     `protobuf:"bytes,15,opt,name=last_apply_version,json=lastApplyVersion,proto3" json:"last_apply_version,omitempty"`
}

func (x *PuppetReport) Reset() {
	*x = PuppetReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuppetReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuppetReport) ProtoMessage() {}

func (x *PuppetReport) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuppetReport.ProtoReflect.Descriptor instead.
func (*PuppetReport) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{2}
}

func (x *PuppetReport) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PuppetReport) GetConfigurationVersion() string {
	if x != nil {
		return x.ConfigurationVersion
	}
	return ""
}

func (x *PuppetReport) GetReportFormat() int64 {
	if x != nil {
		return x.ReportFormat
	}
	return 0
}

func (x *PuppetReport) GetPuppetVersion() string {
	if x != nil {
		return x.PuppetVersion
	}
	return ""
}

func (x *PuppetReport) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PuppetReport) GetTransactionCompleted() bool {
	if x != nil {
		return x.TransactionCompleted
	}
	return false
}

func (x *PuppetReport) GetNoop() bool {
	if x != nil {
		return x.Noop
	}
	return false
}

func (x *PuppetReport) GetNoopPending() bool {
	if x != nil {
		return x.NoopPending
	}
	return false
}

func (x *PuppetReport) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *PuppetReport) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *PuppetReport) GetResourceStatuses() map[string]*ResourceStatus {
	if x != nil {
		return x.ResourceStatuses
	}
	return nil
}

func (x *PuppetReport) GetCorrectiveChange() bool {
	if x != nil {
		return x.CorrectiveChange
	}
	return false
}

func (x *PuppetReport) GetCachedCatalogStatus() string {
	if x != nil {
		return x.CachedCatalogStatus
	}
	return ""
}

func (x *PuppetReport) GetConfdir() string {
	if x != nil {
		return x.Confdir
	}
	return ""
}

func (x *PuppetReport) GetLastApplyVersion() string {
	if x != nil {
		return x.LastApplyVersion
	}
	return ""
}

type ResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeCount      int64    `protobuf:"varint,1,opt,name=change_count,json=changeCount,proto3" json:"change_count,omitempty"`
	Changed          bool     `protobuf:"varint,2,opt,name=changed,proto3" json:"changed,omitempty"`
	ContainmentPath  []string `protobuf:"bytes,3,rep,name=containment_path,json=containmentPath,proto3" json:"containment_path,omitempty"`
	CorrectiveChange bool     `protobuf:"varint,4,opt,name=corrective_change,json=correctiveChange,proto3" json:"corrective_change,omitempty"`
	Failed           bool     `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
	FailedToRestart  bool     `protobuf:"varint,6,opt,name=failed_to_restart,json=failedToRestart,proto3" json:"failed_to_restart,omitempty"`
	OutOfSync        bool     `protobuf:"varint,7,opt,name=out_of_sync,json=outOfSync,proto3" json:"out_of_sync,omitempty"`
	OutOfSyncCount   int64    `protobuf:"varint,8,opt,name=out_of_sync_count,json=outOfSyncCount,proto3" json:"out_of_sync_count,omitempty"`
	ProviderUsed     string   `protobuf:"bytes,9,opt,name=provider_used,json=providerUsed,proto3" json:"provider_used,omitempty"`
	Resource         string   `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource,omitempty"`
	ResourceType     string   `protobuf:"bytes,11,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Skipped          bool     `protobuf:"varint,12,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Title            string   `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	Events           []*Event `protobuf:"bytes,14,rep,name=events,proto3" json:"events,omitempty"`
	File             string   `protobuf:"bytes,15,opt,name=file,proto3" json:"file,omitempty"`
	Line             int64    `protobuf:"varint,16,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *ResourceStatus) Reset() {
	*x = ResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatus) ProtoMessage() {}

func (x *ResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatus.ProtoReflect.Descriptor instead.
func (*ResourceStatus) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceStatus) GetChangeCount() int64 {
	if x != nil {
		return x.ChangeCount
	}
	return 0
}

func (x *ResourceStatus) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

func (x *ResourceStatus) GetContainmentPath() []string {
	if x != nil {
		return x.ContainmentPath
	}
	return nil
}

func (x *ResourceStatus) GetCorrectiveChange() bool {
	if x != nil {
		return x.CorrectiveChange
	}
	return false
}

func (x *ResourceStatus) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ResourceStatus) GetFailedToRestart() bool {
	if x != nil {
		return x.FailedToRestart
	}
	return false
}

func (x *ResourceStatus) GetOutOfSync() bool {
	if x != nil {
		return x.OutOfSync
	}
	return false
}

func (x *ResourceStatus) GetOutOfSyncCount() int64 {
	if x != nil {
		return x.OutOfSyncCount
	}
	return 0
}

func (x *ResourceStatus) GetProviderUsed() string {
	if x != nil {
		return x.ProviderUsed
	}
	return ""
}

func (x *ResourceStatus) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ResourceStatus) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ResourceStatus) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ResourceStatus) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResourceStatus) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ResourceStatus) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ResourceStatus) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

// The request message containing the git rev identifier, e.g. a tag or a
// commit id
type PuppetApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rev  string `protobuf:"bytes,1,opt,name=rev,proto3" json:"rev,omitempty"`
	Noop bool   `protobuf:"varint,2,opt,name=noop,proto3" json:"noop,omitempty"`
}

func (x *PuppetApplyRequest) Reset() {
	*x = PuppetApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuppetApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuppetApplyRequest) ProtoMessage() {}

func (x *PuppetApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuppetApplyRequest.ProtoReflect.Descriptor instead.
func (*PuppetApplyRequest) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{4}
}

func (x *PuppetApplyRequest) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *PuppetApplyRequest) GetNoop() bool {
	if x != nil {
		return x.Noop
	}
	return false
}

// Ask for last apply report
type PuppetLastApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PuppetLastApplyRequest) Reset() {
	*x = PuppetLastApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuppetLastApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuppetLastApplyRequest) ProtoMessage() {}

func (x *PuppetLastApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuppetLastApplyRequest.ProtoReflect.Descriptor instead.
func (*PuppetLastApplyRequest) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{5}
}

type PuppetLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    LockReqType `protobuf:"varint,1,opt,name=type,proto3,enum=rizzopb.LockReqType" json:"type,omitempty"`
	User    string      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Comment string      `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Force   bool        `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *PuppetLockRequest) Reset() {
	*x = PuppetLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuppetLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuppetLockRequest) ProtoMessage() {}

func (x *PuppetLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuppetLockRequest.ProtoReflect.Descriptor instead.
func (*PuppetLockRequest) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{6}
}

func (x *PuppetLockRequest) GetType() LockReqType {
	if x != nil {
		return x.Type
	}
	return LockReqType_lock
}

func (x *PuppetLockRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PuppetLockRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PuppetLockRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type PuppetLockReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host       string     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	LockStatus LockStatus `protobuf:"varint,2,opt,name=lock_status,json=lockStatus,proto3,enum=rizzopb.LockStatus" json:"lock_status,omitempty"`
	Error      string     `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	User       string     `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Comment    string     `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *PuppetLockReport) Reset() {
	*x = PuppetLockReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rizzopb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuppetLockReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuppetLockReport) ProtoMessage() {}

func (x *PuppetLockReport) ProtoReflect() protoreflect.Message {
	mi := &file_rizzopb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuppetLockReport.ProtoReflect.Descriptor instead.
func (*PuppetLockReport) Descriptor() ([]byte, []int) {
	return file_rizzopb_proto_rawDescGZIP(), []int{7}
}

func (x *PuppetLockReport) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PuppetLockReport) GetLockStatus() LockStatus {
	if x != nil {
		return x.LockStatus
	}
	return LockStatus_lock_unknown
}

func (x *PuppetLockReport) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PuppetLockReport) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PuppetLockReport) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_rizzopb_proto protoreflect.FileDescriptor

var file_rizzopb_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x22, 0xe2, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x75, 0x0a,
	0x03, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0xcc, 0x05, 0x0a, 0x0c, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x6f, 0x70, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x64, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x64, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5c, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9a, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x29, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4f,
	0x66, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x3a, 0x0a, 0x12, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x22, 0x18, 0x0a, 0x16,
	0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x70, 0x70, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x7a,
	0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x10, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x7a,
	0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2a, 0x58, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x30, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6c,
	0x6f, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x02, 0x32, 0xe0, 0x01, 0x0a,
	0x05, 0x52, 0x69, 0x7a, 0x7a, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e,
	0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x50,
	0x75, 0x70, 0x70, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1f,
	0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62,
	0x2e, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x70,
	0x70, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x42,
	0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x69, 0x7a, 0x7a, 0x6f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rizzopb_proto_rawDescOnce sync.Once
	file_rizzopb_proto_rawDescData = file_rizzopb_proto_rawDesc
)

func file_rizzopb_proto_rawDescGZIP() []byte {
	file_rizzopb_proto_rawDescOnce.Do(func() {
		file_rizzopb_proto_rawDescData = protoimpl.X.CompressGZIP(file_rizzopb_proto_rawDescData)
	})
	return file_rizzopb_proto_rawDescData
}

var file_rizzopb_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rizzopb_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rizzopb_proto_goTypes = []interface{}{
	(LockStatus)(0),                // 0: rizzopb.Lock_status
	(LockReqType)(0),               // 1: rizzopb.Lock_req_type
	(*Event)(nil),                  // 2: rizzopb.Event
	(*Log)(nil),                    // 3: rizzopb.Log
	(*PuppetReport)(nil),           // 4: rizzopb.PuppetReport
	(*ResourceStatus)(nil),         // 5: rizzopb.ResourceStatus
	(*PuppetApplyRequest)(nil),     // 6: rizzopb.PuppetApplyRequest
	(*PuppetLastApplyRequest)(nil), // 7: rizzopb.PuppetLastApplyRequest
	(*PuppetLockRequest)(nil),      // 8: rizzopb.PuppetLockRequest
	(*PuppetLockReport)(nil),       // 9: rizzopb.PuppetLockReport
	nil,                            // 10: rizzopb.PuppetReport.ResourceStatusesEntry
}
var file_rizzopb_proto_depIdxs = []int32{
	3,  // 0: rizzopb.PuppetReport.logs:type_name -> rizzopb.Log
	10, // 1: rizzopb.PuppetReport.resource_statuses:type_name -> rizzopb.PuppetReport.ResourceStatusesEntry
	2,  // 2: rizzopb.ResourceStatus.events:type_name -> rizzopb.Event
	1,  // 3: rizzopb.PuppetLockRequest.type:type_name -> rizzopb.Lock_req_type
	0,  // 4: rizzopb.PuppetLockReport.lock_status:type_name -> rizzopb.Lock_status
	5,  // 5: rizzopb.PuppetReport.ResourceStatusesEntry.value:type_name -> rizzopb.ResourceStatus
	6,  // 6: rizzopb.Rizzo.PuppetApply:input_type -> rizzopb.PuppetApplyRequest
	7,  // 7: rizzopb.Rizzo.PuppetLastApply:input_type -> rizzopb.PuppetLastApplyRequest
	8,  // 8: rizzopb.Rizzo.PuppetLock:input_type -> rizzopb.PuppetLockRequest
	4,  // 9: rizzopb.Rizzo.PuppetApply:output_type -> rizzopb.PuppetReport
	4,  // 10: rizzopb.Rizzo.PuppetLastApply:output_type -> rizzopb.PuppetReport
	9,  // 11: rizzopb.Rizzo.PuppetLock:output_type -> rizzopb.PuppetLockReport
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_rizzopb_proto_init() }
func file_rizzopb_proto_init() {
	if File_rizzopb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rizzopb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuppetReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuppetApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuppetLastApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuppetLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rizzopb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuppetLockReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rizzopb_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rizzopb_proto_goTypes,
		DependencyIndexes: file_rizzopb_proto_depIdxs,
		EnumInfos:         file_rizzopb_proto_enumTypes,
		MessageInfos:      file_rizzopb_proto_msgTypes,
	}.Build()
	File_rizzopb_proto = out.File
	file_rizzopb_proto_rawDesc = nil
	file_rizzopb_proto_goTypes = nil
	file_rizzopb_proto_depIdxs = nil
}
