// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: rizzopb.proto

package rizzopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rizzo_PuppetApply_FullMethodName     = "/rizzopb.Rizzo/PuppetApply"
	Rizzo_PuppetLastApply_FullMethodName = "/rizzopb.Rizzo/PuppetLastApply"
	Rizzo_PuppetLock_FullMethodName      = "/rizzopb.Rizzo/PuppetLock"
)

// RizzoClient is the client API for Rizzo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RizzoClient interface {
	// applies a ref
	PuppetApply(ctx context.Context, in *PuppetApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error)
	PuppetLastApply(ctx context.Context, in *PuppetLastApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error)
	PuppetLock(ctx context.Context, in *PuppetLockRequest, opts ...grpc.CallOption) (*PuppetLockReport, error)
}

type rizzoClient struct {
	cc grpc.ClientConnInterface
}

func NewRizzoClient(cc grpc.ClientConnInterface) RizzoClient {
	return &rizzoClient{cc}
}

func (c *rizzoClient) PuppetApply(ctx context.Context, in *PuppetApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error) {
	out := new(PuppetReport)
	err := c.cc.Invoke(ctx, Rizzo_PuppetApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rizzoClient) PuppetLastApply(ctx context.Context, in *PuppetLastApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error) {
	out := new(PuppetReport)
	err := c.cc.Invoke(ctx, Rizzo_PuppetLastApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rizzoClient) PuppetLock(ctx context.Context, in *PuppetLockRequest, opts ...grpc.CallOption) (*PuppetLockReport, error) {
	out := new(PuppetLockReport)
	err := c.cc.Invoke(ctx, Rizzo_PuppetLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RizzoServer is the server API for Rizzo service.
// All implementations must embed UnimplementedRizzoServer
// for forward compatibility
type RizzoServer interface {
	// applies a ref
	PuppetApply(context.Context, *PuppetApplyRequest) (*PuppetReport, error)
	PuppetLastApply(context.Context, *PuppetLastApplyRequest) (*PuppetReport, error)
	PuppetLock(context.Context, *PuppetLockRequest) (*PuppetLockReport, error)
	mustEmbedUnimplementedRizzoServer()
}

// UnimplementedRizzoServer must be embedded to have forward compatible implementations.
type UnimplementedRizzoServer struct {
}

func (UnimplementedRizzoServer) PuppetApply(context.Context, *PuppetApplyRequest) (*PuppetReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetApply not implemented")
}
func (UnimplementedRizzoServer) PuppetLastApply(context.Context, *PuppetLastApplyRequest) (*PuppetReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetLastApply not implemented")
}
func (UnimplementedRizzoServer) PuppetLock(context.Context, *PuppetLockRequest) (*PuppetLockReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetLock not implemented")
}
func (UnimplementedRizzoServer) mustEmbedUnimplementedRizzoServer() {}

// UnsafeRizzoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RizzoServer will
// result in compilation errors.
type UnsafeRizzoServer interface {
	mustEmbedUnimplementedRizzoServer()
}

func RegisterRizzoServer(s grpc.ServiceRegistrar, srv RizzoServer) {
	s.RegisterService(&Rizzo_ServiceDesc, srv)
}

func _Rizzo_PuppetApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rizzo_PuppetApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetApply(ctx, req.(*PuppetApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rizzo_PuppetLastApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetLastApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetLastApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rizzo_PuppetLastApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetLastApply(ctx, req.(*PuppetLastApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rizzo_PuppetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rizzo_PuppetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetLock(ctx, req.(*PuppetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rizzo_ServiceDesc is the grpc.ServiceDesc for Rizzo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rizzo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rizzopb.Rizzo",
	HandlerType: (*RizzoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PuppetApply",
			Handler:    _Rizzo_PuppetApply_Handler,
		},
		{
			MethodName: "PuppetLastApply",
			Handler:    _Rizzo_PuppetLastApply_Handler,
		},
		{
			MethodName: "PuppetLock",
			Handler:    _Rizzo_PuppetLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rizzopb.proto",
}
