// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.15.8
// source: hecklerpb.proto

package hecklerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OutputFormat int32

const (
	OutputFormat_none     OutputFormat = 0
	OutputFormat_markdown OutputFormat = 1
	// XXX
	OutputFormat_tty OutputFormat = 2
)

// Enum value maps for OutputFormat.
var (
	OutputFormat_name = map[int32]string{
		0: "none",
		1: "markdown",
		2: "tty",
	}
	OutputFormat_value = map[string]int32{
		"none":     0,
		"markdown": 1,
		"tty":      2,
	}
)

func (x OutputFormat) Enum() *OutputFormat {
	p := new(OutputFormat)
	*p = x
	return p
}

func (x OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_hecklerpb_proto_enumTypes[0].Descriptor()
}

func (OutputFormat) Type() protoreflect.EnumType {
	return &file_hecklerpb_proto_enumTypes[0]
}

func (x OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputFormat.Descriptor instead.
func (OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{0}
}

type HecklerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeSet string   `protobuf:"bytes,1,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	User    string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Nodes   []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *HecklerStatusRequest) Reset() {
	*x = HecklerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerStatusRequest) ProtoMessage() {}

func (x *HecklerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerStatusRequest.ProtoReflect.Descriptor instead.
func (*HecklerStatusRequest) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{0}
}

func (x *HecklerStatusRequest) GetNodeSet() string {
	if x != nil {
		return x.NodeSet
	}
	return ""
}

func (x *HecklerStatusRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HecklerStatusRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type HecklerStatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeStatuses map[string]string `protobuf:"bytes,1,rep,name=node_statuses,json=nodeStatuses,proto3" json:"node_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeErrors   map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HecklerStatusReport) Reset() {
	*x = HecklerStatusReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerStatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerStatusReport) ProtoMessage() {}

func (x *HecklerStatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerStatusReport.ProtoReflect.Descriptor instead.
func (*HecklerStatusReport) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{1}
}

func (x *HecklerStatusReport) GetNodeStatuses() map[string]string {
	if x != nil {
		return x.NodeStatuses
	}
	return nil
}

func (x *HecklerStatusReport) GetNodeErrors() map[string]string {
	if x != nil {
		return x.NodeErrors
	}
	return nil
}

type HecklerNoopRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         string       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	BeginRev     string       `protobuf:"bytes,2,opt,name=begin_rev,json=beginRev,proto3" json:"begin_rev,omitempty"`
	EndRev       string       `protobuf:"bytes,3,opt,name=end_rev,json=endRev,proto3" json:"end_rev,omitempty"`
	OutputFormat OutputFormat `protobuf:"varint,4,opt,name=output_format,json=outputFormat,proto3,enum=hecklerpb.OutputFormat" json:"output_format,omitempty"`
	NodeSet      string       `protobuf:"bytes,5,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes        []string     `protobuf:"bytes,6,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *HecklerNoopRangeRequest) Reset() {
	*x = HecklerNoopRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerNoopRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerNoopRangeRequest) ProtoMessage() {}

func (x *HecklerNoopRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerNoopRangeRequest.ProtoReflect.Descriptor instead.
func (*HecklerNoopRangeRequest) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{2}
}

func (x *HecklerNoopRangeRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HecklerNoopRangeRequest) GetBeginRev() string {
	if x != nil {
		return x.BeginRev
	}
	return ""
}

func (x *HecklerNoopRangeRequest) GetEndRev() string {
	if x != nil {
		return x.EndRev
	}
	return ""
}

func (x *HecklerNoopRangeRequest) GetOutputFormat() OutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return OutputFormat_none
}

func (x *HecklerNoopRangeRequest) GetNodeSet() string {
	if x != nil {
		return x.NodeSet
	}
	return ""
}

func (x *HecklerNoopRangeRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type HecklerNoopRangeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output     string            `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	NodeErrors map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HecklerNoopRangeReport) Reset() {
	*x = HecklerNoopRangeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerNoopRangeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerNoopRangeReport) ProtoMessage() {}

func (x *HecklerNoopRangeReport) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerNoopRangeReport.ProtoReflect.Descriptor instead.
func (*HecklerNoopRangeReport) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{3}
}

func (x *HecklerNoopRangeReport) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *HecklerNoopRangeReport) GetNodeErrors() map[string]string {
	if x != nil {
		return x.NodeErrors
	}
	return nil
}

type HecklerApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         string       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Rev          string       `protobuf:"bytes,2,opt,name=rev,proto3" json:"rev,omitempty"`
	Noop         bool         `protobuf:"varint,3,opt,name=noop,proto3" json:"noop,omitempty"`
	Force        bool         `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	DeltaNoop    bool         `protobuf:"varint,5,opt,name=delta_noop,json=deltaNoop,proto3" json:"delta_noop,omitempty"`
	OutputFormat OutputFormat `protobuf:"varint,6,opt,name=output_format,json=outputFormat,proto3,enum=hecklerpb.OutputFormat" json:"output_format,omitempty"`
	NodeSet      string       `protobuf:"bytes,7,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes        []string     `protobuf:"bytes,8,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *HecklerApplyRequest) Reset() {
	*x = HecklerApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerApplyRequest) ProtoMessage() {}

func (x *HecklerApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerApplyRequest.ProtoReflect.Descriptor instead.
func (*HecklerApplyRequest) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{4}
}

func (x *HecklerApplyRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HecklerApplyRequest) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *HecklerApplyRequest) GetNoop() bool {
	if x != nil {
		return x.Noop
	}
	return false
}

func (x *HecklerApplyRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *HecklerApplyRequest) GetDeltaNoop() bool {
	if x != nil {
		return x.DeltaNoop
	}
	return false
}

func (x *HecklerApplyRequest) GetOutputFormat() OutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return OutputFormat_none
}

func (x *HecklerApplyRequest) GetNodeSet() string {
	if x != nil {
		return x.NodeSet
	}
	return ""
}

func (x *HecklerApplyRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type HecklerApplyReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output     string            `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	NodeErrors map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HecklerApplyReport) Reset() {
	*x = HecklerApplyReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerApplyReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerApplyReport) ProtoMessage() {}

func (x *HecklerApplyReport) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerApplyReport.ProtoReflect.Descriptor instead.
func (*HecklerApplyReport) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{5}
}

func (x *HecklerApplyReport) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *HecklerApplyReport) GetNodeErrors() map[string]string {
	if x != nil {
		return x.NodeErrors
	}
	return nil
}

type HecklerLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Comment string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Force   bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	NodeSet string   `protobuf:"bytes,4,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes   []string `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *HecklerLockRequest) Reset() {
	*x = HecklerLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerLockRequest) ProtoMessage() {}

func (x *HecklerLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerLockRequest.ProtoReflect.Descriptor instead.
func (*HecklerLockRequest) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{6}
}

func (x *HecklerLockRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HecklerLockRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *HecklerLockRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *HecklerLockRequest) GetNodeSet() string {
	if x != nil {
		return x.NodeSet
	}
	return ""
}

func (x *HecklerLockRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type HecklerLockReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockedNodes []string          `protobuf:"bytes,1,rep,name=locked_nodes,json=lockedNodes,proto3" json:"locked_nodes,omitempty"`
	NodeErrors  map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HecklerLockReport) Reset() {
	*x = HecklerLockReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerLockReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerLockReport) ProtoMessage() {}

func (x *HecklerLockReport) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerLockReport.ProtoReflect.Descriptor instead.
func (*HecklerLockReport) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{7}
}

func (x *HecklerLockReport) GetLockedNodes() []string {
	if x != nil {
		return x.LockedNodes
	}
	return nil
}

func (x *HecklerLockReport) GetNodeErrors() map[string]string {
	if x != nil {
		return x.NodeErrors
	}
	return nil
}

type HecklerUnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Force   bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	NodeSet string   `protobuf:"bytes,3,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes   []string `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *HecklerUnlockRequest) Reset() {
	*x = HecklerUnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerUnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerUnlockRequest) ProtoMessage() {}

func (x *HecklerUnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerUnlockRequest.ProtoReflect.Descriptor instead.
func (*HecklerUnlockRequest) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{8}
}

func (x *HecklerUnlockRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HecklerUnlockRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *HecklerUnlockRequest) GetNodeSet() string {
	if x != nil {
		return x.NodeSet
	}
	return ""
}

func (x *HecklerUnlockRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type HecklerUnlockReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockedNodes []string          `protobuf:"bytes,1,rep,name=unlocked_nodes,json=unlockedNodes,proto3" json:"unlocked_nodes,omitempty"`
	NodeErrors    map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HecklerUnlockReport) Reset() {
	*x = HecklerUnlockReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hecklerpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HecklerUnlockReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HecklerUnlockReport) ProtoMessage() {}

func (x *HecklerUnlockReport) ProtoReflect() protoreflect.Message {
	mi := &file_hecklerpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HecklerUnlockReport.ProtoReflect.Descriptor instead.
func (*HecklerUnlockReport) Descriptor() ([]byte, []int) {
	return file_hecklerpb_proto_rawDescGZIP(), []int{9}
}

func (x *HecklerUnlockReport) GetUnlockedNodes() []string {
	if x != nil {
		return x.UnlockedNodes
	}
	return nil
}

func (x *HecklerUnlockReport) GetNodeErrors() map[string]string {
	if x != nil {
		return x.NodeErrors
	}
	return nil
}

var File_hecklerpb_proto protoreflect.FileDescriptor

var file_hecklerpb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x22, 0x5b, 0x0a, 0x14,
	0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x13, 0x48, 0x65,
	0x63, 0x6b, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x55, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x48, 0x65,
	0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x12,
	0x3d, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xc3, 0x01, 0x0a, 0x16, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x6f, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x6f, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x6f, 0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x12, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63,
	0x6b, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x48,
	0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a,
	0x14, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0xcc, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x30, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x74, 0x79, 0x10,
	0x02, 0x32, 0xad, 0x03, 0x0a, 0x07, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x12, 0x52, 0x0a,
	0x0d, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x10, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x6f, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x6f, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x6f,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1e,
	0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0b, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1d,
	0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x0d, 0x48, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f,
	0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x63, 0x6b,
	0x6c, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x68, 0x65, 0x63, 0x6b, 0x6c,
	0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hecklerpb_proto_rawDescOnce sync.Once
	file_hecklerpb_proto_rawDescData = file_hecklerpb_proto_rawDesc
)

func file_hecklerpb_proto_rawDescGZIP() []byte {
	file_hecklerpb_proto_rawDescOnce.Do(func() {
		file_hecklerpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_hecklerpb_proto_rawDescData)
	})
	return file_hecklerpb_proto_rawDescData
}

var file_hecklerpb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hecklerpb_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_hecklerpb_proto_goTypes = []interface{}{
	(OutputFormat)(0),               // 0: hecklerpb.Output_format
	(*HecklerStatusRequest)(nil),    // 1: hecklerpb.HecklerStatusRequest
	(*HecklerStatusReport)(nil),     // 2: hecklerpb.HecklerStatusReport
	(*HecklerNoopRangeRequest)(nil), // 3: hecklerpb.HecklerNoopRangeRequest
	(*HecklerNoopRangeReport)(nil),  // 4: hecklerpb.HecklerNoopRangeReport
	(*HecklerApplyRequest)(nil),     // 5: hecklerpb.HecklerApplyRequest
	(*HecklerApplyReport)(nil),      // 6: hecklerpb.HecklerApplyReport
	(*HecklerLockRequest)(nil),      // 7: hecklerpb.HecklerLockRequest
	(*HecklerLockReport)(nil),       // 8: hecklerpb.HecklerLockReport
	(*HecklerUnlockRequest)(nil),    // 9: hecklerpb.HecklerUnlockRequest
	(*HecklerUnlockReport)(nil),     // 10: hecklerpb.HecklerUnlockReport
	nil,                             // 11: hecklerpb.HecklerStatusReport.NodeStatusesEntry
	nil,                             // 12: hecklerpb.HecklerStatusReport.NodeErrorsEntry
	nil,                             // 13: hecklerpb.HecklerNoopRangeReport.NodeErrorsEntry
	nil,                             // 14: hecklerpb.HecklerApplyReport.NodeErrorsEntry
	nil,                             // 15: hecklerpb.HecklerLockReport.NodeErrorsEntry
	nil,                             // 16: hecklerpb.HecklerUnlockReport.NodeErrorsEntry
}
var file_hecklerpb_proto_depIdxs = []int32{
	11, // 0: hecklerpb.HecklerStatusReport.node_statuses:type_name -> hecklerpb.HecklerStatusReport.NodeStatusesEntry
	12, // 1: hecklerpb.HecklerStatusReport.node_errors:type_name -> hecklerpb.HecklerStatusReport.NodeErrorsEntry
	0,  // 2: hecklerpb.HecklerNoopRangeRequest.output_format:type_name -> hecklerpb.Output_format
	13, // 3: hecklerpb.HecklerNoopRangeReport.node_errors:type_name -> hecklerpb.HecklerNoopRangeReport.NodeErrorsEntry
	0,  // 4: hecklerpb.HecklerApplyRequest.output_format:type_name -> hecklerpb.Output_format
	14, // 5: hecklerpb.HecklerApplyReport.node_errors:type_name -> hecklerpb.HecklerApplyReport.NodeErrorsEntry
	15, // 6: hecklerpb.HecklerLockReport.node_errors:type_name -> hecklerpb.HecklerLockReport.NodeErrorsEntry
	16, // 7: hecklerpb.HecklerUnlockReport.node_errors:type_name -> hecklerpb.HecklerUnlockReport.NodeErrorsEntry
	1,  // 8: hecklerpb.Heckler.HecklerStatus:input_type -> hecklerpb.HecklerStatusRequest
	3,  // 9: hecklerpb.Heckler.HecklerNoopRange:input_type -> hecklerpb.HecklerNoopRangeRequest
	5,  // 10: hecklerpb.Heckler.HecklerApply:input_type -> hecklerpb.HecklerApplyRequest
	7,  // 11: hecklerpb.Heckler.HecklerLock:input_type -> hecklerpb.HecklerLockRequest
	9,  // 12: hecklerpb.Heckler.HecklerUnlock:input_type -> hecklerpb.HecklerUnlockRequest
	2,  // 13: hecklerpb.Heckler.HecklerStatus:output_type -> hecklerpb.HecklerStatusReport
	4,  // 14: hecklerpb.Heckler.HecklerNoopRange:output_type -> hecklerpb.HecklerNoopRangeReport
	6,  // 15: hecklerpb.Heckler.HecklerApply:output_type -> hecklerpb.HecklerApplyReport
	8,  // 16: hecklerpb.Heckler.HecklerLock:output_type -> hecklerpb.HecklerLockReport
	10, // 17: hecklerpb.Heckler.HecklerUnlock:output_type -> hecklerpb.HecklerUnlockReport
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_hecklerpb_proto_init() }
func file_hecklerpb_proto_init() {
	if File_hecklerpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hecklerpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerStatusReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerNoopRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerNoopRangeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerApplyReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerLockReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerUnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hecklerpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HecklerUnlockReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hecklerpb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hecklerpb_proto_goTypes,
		DependencyIndexes: file_hecklerpb_proto_depIdxs,
		EnumInfos:         file_hecklerpb_proto_enumTypes,
		MessageInfos:      file_hecklerpb_proto_msgTypes,
	}.Build()
	File_hecklerpb_proto = out.File
	file_hecklerpb_proto_rawDesc = nil
	file_hecklerpb_proto_goTypes = nil
	file_hecklerpb_proto_depIdxs = nil
}
